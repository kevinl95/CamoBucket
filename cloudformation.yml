AWSTemplateFormatVersion: '2010-09-09'
Description: CamoBucket - Automatically adds adversarial noise to uploaded images to evade facial recognition

Parameters:
  BucketName:
    Type: String
    Description: Name of the S3 bucket to create and use for input/output (must be lowercase, 3-63 characters, no spaces)
    AllowedPattern: ^[a-z0-9][a-z0-9-]*[a-z0-9]$
    MinLength: 3
    MaxLength: 63
    ConstraintDescription: Bucket name must be lowercase, 3-63 characters, start/end with alphanumeric, and contain only lowercase letters, numbers, and hyphens

Resources:

  CamoBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref BucketName

  InitFolders:
    Type: Custom::InitPrefixes
    DependsOn: CamoBucket
    Properties:
      ServiceToken: !GetAtt CamoProcessor.Arn
      Bucket: !Ref BucketName
      Type: InitFolders

  CamoProcessorRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: CamoS3Access
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                Resource: !Sub "arn:aws:s3:::${BucketName}/*"
              - Effect: Allow
                Action:
                  - s3:PutBucketNotification
                Resource: !Sub "arn:aws:s3:::${BucketName}"
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"

  CamoProcessor:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.lambda_handler
      Role: !GetAtt CamoProcessorRole.Arn
      Runtime: python3.10
      Timeout: 900
      MemorySize: 2048
      Code:
        ZipFile: |
          import json
          import boto3
          import numpy as np
          from PIL import Image
          import io
          import urllib3
          import traceback

          s3 = boto3.client('s3')
          http = urllib3.PoolManager()

          def send_response(event, context, status, reason, physical_id):
              response_body = json.dumps({
                  'Status': status,
                  'Reason': reason,
                  'PhysicalResourceId': physical_id,
                  'StackId': event['StackId'],
                  'RequestId': event['RequestId'],
                  'LogicalResourceId': event['LogicalResourceId'],
                  'Data': {}
              })
              http.request('PUT', event['ResponseURL'], body=response_body, headers={'Content-Type': 'application/json'})

          def add_adversarial_noise(image_array, intensity=8):
              noise = np.random.normal(0, intensity, image_array.shape)
              height = image_array.shape[0]
              noise[int(height*0.6):] *= 0.3
              return np.clip(image_array + noise, 0, 255).astype(np.uint8)

          def lambda_handler(event, context):
              try:
                  if 'RequestType' in event:
                      bucket = event['ResourceProperties']['Bucket']
                      if event['ResourceProperties'].get('Type') == 'InitFolders':
                          for prefix in ['input/', 'output/']:
                              s3.put_object(Bucket=bucket, Key=prefix)
                          send_response(event, context, "SUCCESS", "Folders initialized", f'{bucket}/folders-initialized')
                          return

                      if event['ResourceProperties'].get('Type') == 'S3Notification':
                          lambda_arn = event['ResourceProperties']['LambdaArn']
                          if event['RequestType'] in ['Create', 'Update']:
                              s3.put_bucket_notification_configuration(
                                  Bucket=bucket,
                                  NotificationConfiguration={
                                      'LambdaFunctionConfigurations': [{
                                          'Id': 'CamoProcessorTrigger',
                                          'LambdaFunctionArn': lambda_arn,
                                          'Events': ['s3:ObjectCreated:*'],
                                          'Filter': {
                                              'Key': {
                                                  'FilterRules': [{
                                                      'Name': 'prefix',
                                                      'Value': 'input/'
                                                  }]
                                              }
                                          }
                                      }]
                                  }
                              )
                          send_response(event, context, "SUCCESS", "S3 notification configured", f'{bucket}/notification-configured')
                          return

                  if 'Records' not in event:
                      return {'statusCode': 400, 'body': 'No S3 records found'}

                  bucket = event['Records'][0]['s3']['bucket']['name']
                  key = event['Records'][0]['s3']['object']['key']

                  if key.startswith('output/'):
                      return {'statusCode': 200, 'body': 'Already processed'}

                  response = s3.get_object(Bucket=bucket, Key=key)
                  image_data = response['Body'].read()

                  image = Image.open(io.BytesIO(image_data))
                  if image.mode != 'RGB':
                      image = image.convert('RGB')

                  img_array = np.array(image)
                  noisy_array = add_adversarial_noise(img_array)
                  noisy_image = Image.fromarray(noisy_array)

                  output_buffer = io.BytesIO()
                  noisy_image.save(output_buffer, format='JPEG', quality=95)
                  output_buffer.seek(0)

                  filename = key.split('/')[-1]
                  output_key = f"output/cloaked_{filename}"
                  s3.put_object(
                      Bucket=bucket,
                      Key=output_key,
                      Body=output_buffer.getvalue(),
                      ContentType='image/jpeg',
                      Metadata={"X-Cloaked": "true"}
                  )

                  return {
                      'statusCode': 200,
                      'body': json.dumps({
                          'message': f'Image cloaked: {key} -> {output_key}'
                      })
                  }

              except Exception as e:
                  traceback.print_exc()
                  if 'RequestType' in event:
                      send_response(event, context, "FAILED", str(e), event.get('PhysicalResourceId', 'error'))
                      return
                  return {'statusCode': 500, 'body': json.dumps({'error': str(e)})}
      Layers:
        - !Ref PillowLayer

  PillowLayer:
    Type: AWS::Lambda::LayerVersion
    Properties:
      LayerName: PillowNumpyDependencies
      Description: Pillow and NumPy for image processing
      CompatibleRuntimes:
        - python3.10
      Content:
        S3Bucket: camobucket
        S3Key: metadata-scrubber-layer.zip

  LambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref CamoProcessor
      Action: lambda:InvokeFunction
      Principal: s3.amazonaws.com
      SourceArn: !Sub "arn:aws:s3:::${BucketName}"
      SourceAccount: !Ref AWS::AccountId

  S3BucketNotification:
    Type: Custom::S3Notification
    Properties:
      ServiceToken: !GetAtt CamoProcessor.Arn
      Bucket: !Ref BucketName
      LambdaArn: !GetAtt CamoProcessor.Arn
      Type: S3Notification
    DependsOn: LambdaInvokePermission
