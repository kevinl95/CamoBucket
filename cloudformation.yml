AWSTemplateFormatVersion: '2010-09-09'
Description: CamoBucket - Automatically adds adversarial noise to uploaded images to evade facial recognition

Parameters:
  BucketName:
    Type: String
    Description: Name of the S3 bucket to create and use for input/output
  LayerBucketName:
    Type: String
    Description: S3 bucket containing the Pillow/NumPy layer zip file
    Default: your-public-layer-bucket

Resources:

  CamoBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref BucketName
      NotificationConfiguration:
        LambdaConfigurations:
          - Event: s3:ObjectCreated:*
            Filter:
              S3Key:
                Rules:
                  - Name: prefix
                    Value: input/
            Function: !GetAtt CamoProcessor.Arn

  InitFolders:
    Type: Custom::InitPrefixes
    DependsOn: CamoBucket
    Properties:
      ServiceToken: !GetAtt CamoProcessor.Arn
      Bucket: !Ref BucketName

  CamoProcessorRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: CamoS3Access
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                Resource: !Sub "${CamoBucket.Arn}/*"
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"

  CamoProcessor:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: CamoBucketProcessor
      Handler: index.lambda_handler
      Role: !GetAtt CamoProcessorRole.Arn
      Runtime: python3.9
      Timeout: 900
      MemorySize: 2048
      Code:
        ZipFile: |
          import json
          import boto3
          import numpy as np
          from PIL import Image
          import io
          s3 = boto3.client('s3')

          def add_adversarial_noise(image_array, intensity=8):
              """Add targeted noise to confuse facial recognition"""
              noise = np.random.normal(0, intensity, image_array.shape)
              height = image_array.shape[0]
              noise[int(height*0.6):] *= 0.3
              return np.clip(image_array + noise, 0, 255).astype(np.uint8)

          def lambda_handler(event, context):
              # Handle CloudFormation custom resource for folder initialization
              if 'RequestType' in event:
                  bucket = event['ResourceProperties']['Bucket']
                  for prefix in ['input/', 'output/']:
                      s3.put_object(Bucket=bucket, Key=prefix)
                  return {'PhysicalResourceId': f'{bucket}/initialized'}
              
              # Handle S3 trigger for image processing
              bucket = event['Records'][0]['s3']['bucket']['name']
              key = event['Records'][0]['s3']['object']['key']
              
              if key.startswith('output/'):
                  return {'statusCode': 200, 'body': 'Already processed'}
              
              try:
                  response = s3.get_object(Bucket=bucket, Key=key)
                  image_data = response['Body'].read()
                  
                  image = Image.open(io.BytesIO(image_data))
                  if image.mode != 'RGB':
                      image = image.convert('RGB')
                  
                  # Convert to numpy and add adversarial noise
                  img_array = np.array(image)
                  noisy_array = add_adversarial_noise(img_array)
                  
                  # Convert back to PIL
                  noisy_image = Image.fromarray(noisy_array)
                  
                  # Save processed image
                  output_buffer = io.BytesIO()
                  noisy_image.save(output_buffer, format='JPEG', quality=95)
                  output_buffer.seek(0)
                  
                  # Upload to output folder
                  filename = key.split('/')[-1]
                  output_key = f"output/cloaked_{filename}"
                  s3.put_object(
                      Bucket=bucket,
                      Key=output_key,
                      Body=output_buffer.getvalue(),
                      ContentType='image/jpeg'
                  )
                  
                  return {
                      'statusCode': 200,
                      'body': json.dumps({
                          'message': f'Image cloaked: {key} -> {output_key}'
                      })
                  }
                  
              except Exception as e:
                  print(f"Error processing {key}: {str(e)}")
                  return {'statusCode': 500, 'body': json.dumps({'error': str(e)})}
      Layers:
        - !Ref PillowLayer

  PillowLayer:
    Type: AWS::Lambda::LayerVersion
    Properties:
      LayerName: PillowNumpyDependencies
      Description: Pillow and NumPy for image processing
      CompatibleRuntimes:
        - python3.9
      Content:
        S3Bucket: !Ref LayerBucketName
        S3Key: pillow-numpy-layer.zip

  LambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref CamoProcessor
      Action: lambda:InvokeFunction
      Principal: s3.amazonaws.com
      SourceArn: !GetAtt CamoBucket.Arn
